<launch>
  <arg name="dataset_name" value="Sim"/>
  <arg name="verbosity"    default="0" />
  <arg name="online" default="true" />

  <!-- Set log_output to true and KimeraVIO will log output of all modules to
       the log_output_path location. -->
  <arg name="log_output" default="false"/>
  <arg name="log_output_path"
       default="$(find kimera_vio_ros)/output_logs/$(arg dataset_name)"
       if="$(arg log_output)"/>
  <!-- Set to true and specify gt_topic if you want to log ground-truth data -->
  <arg name="log_gt_data" default="false"/>
  <arg name="gt_topic"    default="uav1/kimera_vio_ros/odom"/>

  <!-- Set should_use_sim_time to true if you use rosbag with clock argument -->
  <arg name="should_use_sim_time" default="false"/>  <!-- try false?? -->

  <!-- Only used when parsing a rosbag -->
  <arg name="rosbag_path" default="default.bag"
       unless="$(arg online)"/>

  <!-- If true, KimeraVIO will enable the LoopClosureDetector module. -->
  <arg name="use_lcd"   default="false"/>
  <arg name="visualize" default="true"/>
  <arg name="viz_type"  default="0"/> <!-- 0: 2d3d_mesh, 1: pointcloud -->

  <!-- Parameters are in ~/kimera_ws/src/Kimera-VIO-ROS/params/Sim/ -->
  <!-- Using default vocab ~/kimera_ws/src/Kimera-VIO/vocabulary/ORBvoc.yml -->

  <!-- Use CameraInfo topics to get parameters, instead of yaml files -->
  <arg name="use_online_cam_params" value="false"/>
  <!-- Gives errors when unused Right cam has the same params -->
  <!-- It seems that it reads yaml also in "true"?? But combines with cinfo -->

  <!-- Args for mapped topics from the mrs simulation -->
  <arg name="uav_name" default="$(env UAV_NAME)"/> 
  <arg name="ts_m_topic" default="$(arg uav_name)/timestamp_manager"/>
  <arg name="uav_cam" default="$(arg uav_name)/vio/camera"/>
    <!-- note: use "$(arg uav_name)/rgbd/color" .......... for normal simulation 
                   "$(arg uav_name)/vio/camera" .......... for sim with vio setup 
                   "$(arg uav_name)/fisheye_undistort" ... for sim with undist img. 
                   "$/mv_25003659" ....................... for real world dataest -->

  <!-- Launching the timestamp manager for correcting the 
       image, camera info and imu topics externally or here -->
  <arg name="using_extern_ts_m" value="true"/>
  <group unless="$(arg using_extern_ts_m)">
    <node 
      pkg="my_ros_package" 
      name="kimera_timestamp_manager"
      type="timestamp_manager"     
      args="$(arg uav_cam) -d sim -k sim -m equidistant"
      output="screen"
    /> 
  </group>

  <!-- Subscribed Topics, TODO: map the correct topics -->
  <arg name="left_cam_topic"        default="/$(arg ts_m_topic)/image_raw"/>
  <arg name="left_cam_info_topic"   default="/$(arg ts_m_topic)/camera_info"/>
  <arg name="imu_topic"             default="/$(arg ts_m_topic)/imu/data"/>

  <!-- The authors use fake stereo cam in mono, so this also needs to be filled in -->
  <arg name="right_cam_topic"       default="/$(arg ts_m_topic)/image_raw"/> 
  <arg name="right_cam_info_topic"  default="/$(arg ts_m_topic)/camera_info"/> 


  <!-- Ground-truth odometry for initialization. -->
  <arg name="use_odom" value="true"/>
  <arg name="transform_odom" value="false"/>

  <!-- odometry manager rotates the initial gt_odometry to camera frame -->
  <node pkg="my_ros_package" name="odometry_manager" type="odometry_manager" 
        output="screen" if="$(arg transform_odom)"/> 

  <!-- TODO: is there any better way how to do double if-else cond?? -->
  <arg name="odometry_gt_topic" default="/odometry_manager/odometry"
       if="$(arg transform_odom)"/> 
  <arg name="odometry_gt_topic" default="/uav1/odometry/odom_gps"
       unless="$(arg transform_odom)"/>
  <arg name="odometry_ground_truth_topic" default="$(arg odometry_gt_topic)"
       if="$(arg use_odom)"/>


  <!-- Get accurate external positions -->
  <arg name="use_reinit" value="false"/>
  <arg name="reinit_flag_topic" default = "/reinit_manager/flag" 
       if="$(arg use_reinit)"/>
  <arg name="reinit_pose_topic" default = "/reinit_manager/pose" 
       if="$(arg use_reinit)"/>
  <!-- TODO: try also passing velocities? -->


  <!-- Frame IDs -->
  <arg name="world_frame_id"     value="kimera_world"/>
  <arg name="base_link_frame_id" value="kimera_body"/>
  <arg name="map_frame_id"       value="kimera_map"/>
  <arg name="left_cam_frame_id"  value="kimera_left_cam"/>
  <arg name="right_cam_frame_id" value="kimera_right_cam"/>

  <!-- Launch actual pipeline -->
  <include file="$(find kimera_vio_ros)/launch/kimera_vio_ros.launch"
    pass_all_args="true"/>

  <!-- Launch static TF node to connect Kimera and Simulation tf trees -->
  <!-- x y z qx qy qz qw -->
  <node 
    name="sim_w_to_k_w" 
    pkg="tf2_ros" 
    type="static_transform_publisher" 
    args="0 0 0 0 0 0 $(arg uav_name)/stable_origin 
                      $(arg world_frame_id)"
  /> 
  <!-- in "world" frame
    name="sim_w_to_k_w" 
    args="0 0 0 0 0 0 $(arg uav_name)/stable_origin 
                      $(arg world_frame_id)"
    args="0 0 0 0 0 -0.707 0.707 $(arg uav_name)/stable_origin 
                                 $(arg world_frame_id)"
    args="0 0 0 0.5 -0.5 0.5 -0.5 $(arg uav_name)/stable_origin 
                                  $(arg world_frame_id)"
  -->
  <!-- in "body" frame
    name="sim_b_to_k_b" 
    args="0 0 0 0 0 0 $(arg uav_name)/fcu 
                      $(arg base_link_frame_id)" 
  -->  
</launch>
